{"version":3,"sources":["components/TodoForm.jsx","components/CameraControls.jsx","components/Effects.jsx","components/EnvLight.jsx","components/Postit.jsx","components/WhiteBoard.jsx","ThreeCanvas.jsx","App.js","index.js"],"names":["randNum","max","Math","random","TodoForm","todo","setTodo","useForm","register","handleSubmit","onSubmit","data","e","color","floor","id","uuid","pos","rot","target","reset","required","type","extend","OrbitControls","CameraControls","useThree","camera","domElement","gl","controls","useRef","useFrame","state","current","update","ref","args","Effects","composer","scene","size","useEffect","setSize","width","height","render","attachArray","kernelRadius","maxDistance","FXAAShader","material-uniforms-resolution-value","EffectComposer","ShaderPass","RenderPass","SSAOPass","EnvLight","background","useLoader","RGBELoader","loader","setDataType","THREE","setPath","texture","gen","hdr","fromEquirectangular","dispose","environment","makeLabelCanvas","content","bgcolor","textColor","blur","ctx","document","createElement","getContext","font","measureText","borderSize","canvas","textBaseline","fillStyle","filter","fillRect","fillText","useGLTF","preload","Postit","props","group","useState","hover","setHover","nodes","fallback","castShadow","receiveShadow","geometry","Plane","material","diffuseText","roughnessText","bumpText","minFilter","wrapS","wrapT","flipY","roughness","bump","map","side","roughnessMap","bumpMap","metalness","newMat","position","rotation","PI","onPointerOver","onPointerOut","onClick","info","setToDelete","WhiteBoard","whiteBoardMat","materials","frameMat","frame","whiteBoard","softShadows","ThreeCanvas","toDelete","newList","item","colorManagement","shadowMap","shadow-mapSize-height","shadow-mapSize-width","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","newTodo","App","className","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.322470cd.chunk.js","sourcesContent":["import { useForm } from \"react-hook-form\";\r\nimport uuid from \"react-uuid\";\r\n\r\nconst randNum = (max) => {\r\n  if (Math.random() < 0.5) {\r\n    return Math.random() * max;\r\n  } else {\r\n    return -(Math.random() * max);\r\n  }\r\n};\r\n\r\nconst randColor = () => {\r\n  const r = Math.floor(Math.random() * 255);\r\n  const g = Math.floor(Math.random() * 255);\r\n  const b = Math.floor(Math.random() * 255);\r\n  return [r, g, b];\r\n};\r\n\r\nconst TodoForm = ({ todo, setTodo }) => {\r\n  const { register, handleSubmit } = useForm();\r\n  const maxRange = 5;\r\n  const onSubmit = (data, e) => {\r\n    data.color = randColor();\r\n    data.id = uuid();\r\n    data.pos = [randNum(maxRange), randNum(maxRange), 0];\r\n    data.rot = randNum(0.3);\r\n    setTodo([...todo, data]);\r\n    e.target.reset();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <input {...register(\"content\", { required: true })} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import { useRef } from \"react\";\r\nimport { extend, useFrame, useThree } from \"react-three-fiber\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nextend({ OrbitControls });\r\n\r\nconst CameraControls = () => {\r\n  const {\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree();\r\n  const controls = useRef();\r\n  useFrame((state) => controls.current.update());\r\n  return <orbitControls ref={controls} args={[camera, domElement]} />;\r\n};\r\n\r\nexport default CameraControls;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { extend, useThree, useFrame } from \"react-three-fiber\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\nimport { SSAOPass } from \"three/examples/jsm/postprocessing/SSAOPass\";\r\nimport { FXAAShader } from \"three/examples/jsm/shaders/FXAAShader\";\r\n\r\nextend({ EffectComposer, ShaderPass, RenderPass, SSAOPass });\r\n\r\nexport default function Effects() {\r\n  const composer = useRef();\r\n  const { scene, gl, size, camera } = useThree();\r\n  useEffect(() => void composer.current.setSize(size.width, size.height), [\r\n    size,\r\n  ]);\r\n  useFrame(() => composer.current.render(), 1);\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <sSAOPass\r\n        attachArray=\"passes\"\r\n        args={[scene, camera, 1024, 1024]}\r\n        kernelRadius={0.5}\r\n        maxDistance={1}\r\n      />\r\n      <shaderPass\r\n        attachArray=\"passes\"\r\n        args={[FXAAShader]}\r\n        material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\r\n      />\r\n    </effectComposer>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport { useEffect } from \"react\";\r\nimport { useThree, useLoader } from \"react-three-fiber\";\r\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\r\n\r\nconst EnvLight = ({ background = true }) => {\r\n  const { gl, scene } = useThree();\r\n\r\n  /* const loader = new THREE.TextureLoader(); */\r\n  const [texture] = useLoader(\r\n    RGBELoader,\r\n    [\"colorful_studio_1k.hdr\"],\r\n    (loader) => {\r\n      loader.setDataType(THREE.UnsignedByteType);\r\n      loader.setPath(\"\");\r\n    }\r\n  );\r\n  useEffect(() => {\r\n    const gen = new THREE.PMREMGenerator(gl);\r\n    const hdr = gen.fromEquirectangular(texture);\r\n    texture.dispose();\r\n    gen.dispose();\r\n    scene.environment = hdr.texture;\r\n    scene.background = scene.environment;\r\n  }, [texture]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default EnvLight;\r\n","import * as THREE from \"three\";\r\nimport { Suspense, useRef, useState } from \"react\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\n\r\nfunction makeLabelCanvas(size, content, bgcolor, textColor, blur) {\r\n  const borderSize = 25;\r\n  const ctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n  const font = `${size}px Shadows Into Light`;\r\n  ctx.font = font;\r\n  // measure how long the name will be\r\n  const doubleBorderSize = borderSize * 2;\r\n  const width = ctx.measureText(content).width + doubleBorderSize;\r\n  const height = ctx.measureText(\"M\").width;\r\n  /*\r\n  if(width > 500){\r\n    \r\n  }\r\n  \r\n  */\r\n  ctx.canvas.width = width;\r\n  ctx.canvas.height = width;\r\n\r\n  // need to set font again after resizing canvas\r\n  ctx.font = font;\r\n  ctx.textBaseline = \"top\";\r\n\r\n  ctx.fillStyle = bgcolor;\r\n  ctx.filter = `blur(${blur})`;\r\n  ctx.fillRect(0, 0, width, width);\r\n  ctx.fillStyle = textColor;\r\n  ctx.fillText(content, borderSize, borderSize);\r\n\r\n  return ctx;\r\n}\r\n\r\nconst Postit = (props) => {\r\n  const group = useRef();\r\n  const [hover, setHover] = useState(false);\r\n  const { nodes } = useGLTF(\"/postit.gltf\");\r\n\r\n  const handleOnClick = (id) => {\r\n    props.setToDelete(id);\r\n  };\r\n\r\n  //Material with canvas texture\r\n  const newMat = () => {\r\n    const diffuseText = makeLabelCanvas(\r\n      100,\r\n      props.content,\r\n      \"white\",\r\n      \"#292929\",\r\n      \"0px\"\r\n    );\r\n    const roughnessText = makeLabelCanvas(\r\n      100,\r\n      props.content,\r\n      \"#cccccc\",\r\n      \"#616161\",\r\n      \"2px\"\r\n    );\r\n    const bumpText = makeLabelCanvas(\r\n      100,\r\n      props.content,\r\n      \"#ffffff\",\r\n      \"#fdfdfd\",\r\n      \"0.5px\"\r\n    );\r\n\r\n    const texture = new THREE.CanvasTexture(diffuseText.canvas);\r\n    texture.minFilter = THREE.LinearFilter;\r\n    texture.wrapS = THREE.ClampToEdgeWrapping;\r\n    texture.wrapT = THREE.ClampToEdgeWrapping;\r\n    texture.flipY = false;\r\n\r\n    const roughness = new THREE.CanvasTexture(roughnessText.canvas);\r\n    roughness.minFilter = THREE.LinearFilter;\r\n    roughness.wrapS = THREE.ClampToEdgeWrapping;\r\n    roughness.wrapT = THREE.ClampToEdgeWrapping;\r\n    roughness.flipY = false;\r\n\r\n    const bump = new THREE.CanvasTexture(bumpText.canvas);\r\n    bump.minFilter = THREE.LinearFilter;\r\n    bump.wrapS = THREE.ClampToEdgeWrapping;\r\n    bump.wrapT = THREE.ClampToEdgeWrapping;\r\n    bump.flipY = false;\r\n\r\n    return new THREE.MeshStandardMaterial({\r\n      color: hover ? \"yellow\" : props.color,\r\n      map: texture,\r\n      side: THREE.DoubleSide,\r\n      roughness: 0.5,\r\n      roughnessMap: roughness,\r\n      bumpMap: bump,\r\n      metalness: 0,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <group ref={group} {...props} dispose={null}>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Plane.geometry}\r\n          material={newMat()}\r\n          position={props.position}\r\n          rotation={[Math.PI / 2, props.rot, 0]}\r\n          onPointerOver={() => setHover(true)}\r\n          onPointerOut={() => setHover(false)}\r\n          onClick={() => handleOnClick(props.info)}\r\n        />\r\n      </group>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nuseGLTF.preload(\"/postit.gltf\");\r\n\r\nexport default Postit;\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { Suspense, useRef } from \"react\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\nimport * as THREE from \"three\";\r\n\r\nexport default function WhiteBoard(props) {\r\n  const group = useRef();\r\n  const { nodes, materials } = useGLTF(\"/whiteBoard.gltf\");\r\n\r\n  const whiteBoardMat = new THREE.MeshStandardMaterial({\r\n    color: \"#dddddd\",\r\n    roughness: 0.1,\r\n    metalness: 0,\r\n  });\r\n\r\n  const frameMat = new THREE.MeshStandardMaterial({\r\n    color: \"#a5a5a5\",\r\n    roughness: 0.5,\r\n    metalness: 0.5,\r\n  });\r\n\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <group ref={group} {...props} dispose={null}>\r\n        <mesh\r\n          geometry={nodes.frame.geometry}\r\n          castShadow\r\n          receiveShadow\r\n          material={frameMat}\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n        />\r\n        <mesh\r\n          geometry={nodes.whiteBoard.geometry}\r\n          castShadow\r\n          receiveShadow\r\n          material={whiteBoardMat}\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n        />\r\n      </group>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nuseGLTF.preload(\"/whiteboard.gltf\");\r\n","import { softShadows } from \"@react-three/drei\";\r\nimport { Suspense, useEffect } from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport CameraControls from \"./components/CameraControls\";\r\nimport Effects from \"./components/Effects\";\r\nimport EnvLight from \"./components/EnvLight\";\r\nimport Postit from \"./components/Postit\";\r\nimport WhiteBoard from \"./components/WhiteBoard\";\r\n\r\nsoftShadows();\r\n\r\nconst ThreeCanvas = ({ todo, setTodo, toDelete, setToDelete }) => {\r\n  useEffect(() => {\r\n    if (toDelete === null) {\r\n      return;\r\n    }\r\n    const newList = todo.filter((item) => item.id !== toDelete);\r\n    setTodo(newList);\r\n  }, [toDelete]);\r\n\r\n  const shadowMapSize = 2048;\r\n  const shadowCamSize = 25;\r\n\r\n  return (\r\n    <Canvas colorManagement shadowMap>\r\n      <CameraControls />\r\n      <directionalLight\r\n        position={[10, 15, 20]}\r\n        castShadow\r\n        shadow-mapSize-height={shadowMapSize}\r\n        shadow-mapSize-width={shadowMapSize}\r\n        shadow-camera-far={150}\r\n        shadow-camera-left={-shadowCamSize}\r\n        shadow-camera-right={shadowCamSize}\r\n        shadow-camera-top={shadowCamSize}\r\n        shadow-camera-bottom={-shadowCamSize}\r\n      />\r\n      <Suspense fallback={null}>\r\n        <EnvLight />\r\n        <WhiteBoard />\r\n        {todo.map((newTodo) => {\r\n          return (\r\n            <Postit\r\n              position={newTodo.pos}\r\n              content={newTodo.content}\r\n              key={newTodo.id}\r\n              info={newTodo.id}\r\n              color={`rgb(${newTodo.color[0]},${newTodo.color[1]},${newTodo.color[2]})`}\r\n              setToDelete={setToDelete}\r\n              rot={newTodo.rot}\r\n            />\r\n          );\r\n        })}\r\n      </Suspense>\r\n      <Effects />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default ThreeCanvas;\r\n","import { useState } from \"react\";\nimport TodoForm from \"./components/TodoForm\";\nimport ThreeCanvas from \"./ThreeCanvas\";\n\nfunction App() {\n  const [todo, setTodo] = useState([]);\n  const [toDelete, setToDelete] = useState();\n  return (\n    <div className=\"w-screen h-screen bg-green-500\">\n      <TodoForm todo={todo} setTodo={setTodo} />\n      <ThreeCanvas\n        todo={todo}\n        setTodo={setTodo}\n        toDelete={toDelete}\n        setToDelete={setToDelete}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}